/*
 * VariableEditorPanel.java
 *
 * Created on 29 July 2008, 15:29
 */
package canreg.client.gui.components;

import canreg.client.gui.tools.MaxLengthDocument;
import canreg.common.DatabaseVariablesListElement;
import canreg.server.database.DictionaryEntry;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;


/**
 *
 * @author  ervikm
 */
public class VariableEditorPanel extends javax.swing.JPanel {

    protected DatabaseVariablesListElement databaseListElement;
    protected Map<String, DictionaryEntry> possibleValuesMap = null;
    protected int maxLength;

    /** Creates new form VariableEditorPanel */
    public VariableEditorPanel() {
        initComponents();
        textField1.addFocusListener(new java.awt.event.FocusAdapter() {

            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                componentFocusGained(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        variableNameLabel = new javax.swing.JLabel();
        splitPane1 = new javax.swing.JSplitPane();
        splitPane2 = new javax.swing.JSplitPane();
        textField2 = new javax.swing.JTextField();
        textField3 = new javax.swing.JTextField();
        textField1 = new javax.swing.JTextField();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getResourceMap(VariableEditorPanel.class);
        variableNameLabel.setText(resourceMap.getString("variableNameLabel.text")); // NOI18N
        variableNameLabel.setName("variableNameLabel"); // NOI18N

        splitPane1.setResizeWeight(0.5);
        splitPane1.setFocusable(false);
        splitPane1.setName("splitPane1"); // NOI18N

        splitPane2.setResizeWeight(0.5);
        splitPane2.setFocusable(false);
        splitPane2.setName("splitPane2"); // NOI18N

        textField2.setEditable(false);
        textField2.setText(resourceMap.getString("textField2.text")); // NOI18N
        textField2.setFocusable(false);
        textField2.setName("textField2"); // NOI18N
        textField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClickHandler(evt);
            }
        });
        textField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField2ActionPerformed(evt);
            }
        });
        splitPane2.setLeftComponent(textField2);

        textField3.setEditable(false);
        textField3.setText(resourceMap.getString("textField3.text")); // NOI18N
        textField3.setFocusable(false);
        textField3.setName("textField3"); // NOI18N
        splitPane2.setRightComponent(textField3);

        splitPane1.setRightComponent(splitPane2);

        textField1.setText(resourceMap.getString("textField1.text")); // NOI18N
        textField1.setName("textField1"); // NOI18N
        textField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textField1ActionPerformed(evt);
            }
        });
        splitPane1.setLeftComponent(textField1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(variableNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(splitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(variableNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void mouseClickHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClickHandler

    if (databaseListElement.getVariableType().equalsIgnoreCase("dict")) {
        // System.out.println("Coucou");
        if (possibleValuesMap == null) {
            JOptionPane.showInternalMessageDialog(this, "Empty dictionary.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            DictionaryEntry[] possibleValuesArray = new DictionaryEntry[possibleValuesMap.size()];
            Iterator<String> it = possibleValuesMap.keySet().iterator();
            int i = 0;
            while (it.hasNext()) {
                possibleValuesArray[i++] = possibleValuesMap.get(it.next());
            }
            DictionaryEntry selectedValue = (DictionaryEntry) JOptionPane.showInternalInputDialog(this,
                    "Choose one", "Input",
                    JOptionPane.INFORMATION_MESSAGE, null,
                    possibleValuesArray, possibleValuesArray[0]);
            textField1.setText(selectedValue.getCode());
            textField2.setText(selectedValue.getDescription());
        }
    } else {
        // Do nothing
        // This should never happen...
    }
}//GEN-LAST:event_mouseClickHandler

private void textField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField2ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_textField2ActionPerformed

private void textField1ActionPerformed(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
    if (possibleValuesMap != null) {
        if (textField1.getText().length() > 0) {
            try {
                textField2.setText((String) possibleValuesMap.get(textField1.getText()).getDescription());
            } catch (NullPointerException e) {
                JOptionPane.showInternalMessageDialog(this, textField1.getText() + " is not a valid dictionary code.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}//GEN-LAST:event_textField1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JSplitPane splitPane1;
    protected javax.swing.JSplitPane splitPane2;
    protected javax.swing.JTextField textField1;
    protected javax.swing.JTextField textField2;
    protected javax.swing.JTextField textField3;
    private javax.swing.JLabel variableNameLabel;
    // End of variables declaration//GEN-END:variables
    protected void setVariableName(String variableName) {
        variableNameLabel.setText(variableName);
    }

    public void setValue(String value) {

        textField1.setText(value);
        if (value.trim().length() > 0) {
            if (possibleValuesMap != null) {
                try {
                    textField2.setText((String) possibleValuesMap.get(value).getDescription());
                } catch (NullPointerException e) {
                    textField2.setText("Dictionary Error");
                }
            }
        }

    }

    public String getValue() {
        return textField1.getText();
    }

    public void setDatabaseVariablesListElement(DatabaseVariablesListElement databaseListElement) {
        this.databaseListElement = databaseListElement;
        setVariableName(databaseListElement.getFullName());

        String fillInStatus = databaseListElement.getFillInStatus();
        if (fillInStatus.equalsIgnoreCase("Automatic")) {
            textField1.setFocusable(false);
            textField1.setEditable(false);
        }

        // String variableType = databaseListElement.getVariableType();

        setMaximumLength(databaseListElement.getVariableLength());
    }

    public void setPossibleValues(Map<String, DictionaryEntry> possibleValues) {
        this.possibleValuesMap = possibleValues;
        DictionaryEntry m;
        if (possibleValuesMap == null) {
            splitPane2.setVisible(false);
        } else {
            m = possibleValuesMap.get(getValue());
            if (m != null) {
                textField2.setText(m.getDescription());
            }
        }
    }

    protected void setMaximumLength(int length) {
        this.maxLength = length;
        if (this.maxLength > 0) {
            textField1.setDocument(new MaxLengthDocument(maxLength));
        }
    }

    protected void componentFocusGained(java.awt.event.FocusEvent evt) {
        Component focusedComponent = evt.getComponent();
        Point point = focusedComponent.getLocation();
        point.y += 42; // Trial and error
        this.scrollRectToVisible(new Rectangle(point));
    }
}
