/*
 * ExportFrame.java
 *
 * Created on 28 February 2008, 14:12
 */
package canreg.client.gui.analysis;

import cachingtableapi.DistributedTableDescription;
import cachingtableapi.DistributedTableModel;
import canreg.client.CanRegClientApp;
import canreg.client.DistributedTableDataSourceClient;
import canreg.client.LocalSettings;
import canreg.client.gui.components.VariablesExportDetailsPanel;
import canreg.client.gui.tools.TableColumnAdjuster;
import canreg.client.gui.tools.XTableColumnModel;
import canreg.common.DatabaseFilter;
import canreg.common.DateHelper;
import canreg.common.Globals;
import canreg.common.GregorianCalendarCanReg;
import canreg.server.database.Dictionary;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
// import javax.swing.TransferHandler;
import javax.swing.table.TableColumn;
import org.jdesktop.application.Task;
import org.jdesktop.application.Action;

/**
 *
 * @author  morten
 */
public class ExportReportInternalFrame extends javax.swing.JInternalFrame implements ActionListener {

    private JDesktopPane dtp;
    private DistributedTableDescription tableDatadescription;
    private DistributedTableDataSourceClient tableDataSource;
    private DistributedTableModel tableDataModel;
    private JScrollPane resultScrollPane;
    private JTable resultTable = new JTable();
    private JFileChooser chooser;
    private String path;
    private LocalSettings localSettings;
    private LinkedList<String> variablesToShow;
    private XTableColumnModel tableColumnModel;
    private final Map<Integer, Dictionary> dictionary;
    private int VARIABLE_NAME_ENGLISH_INDEX = 1;
    private int VARIABLE_NAME_SHORT_INDEX = 0;
    private int VARIABLE_NAME_FULL_INDEX = 2;
    private int VARIABLE_NAME_STANDARD_INDEX = 3;

    /** Creates new form ExportFrame
     * @param dtp is a pointer to the current desktop pane.
     */
    public ExportReportInternalFrame(JDesktopPane dtp) {
        initComponents();
        this.dtp = dtp;
        localSettings = CanRegClientApp.getApplication().getLocalSettings();
        dictionary = CanRegClientApp.getApplication().getDictionary();
        initOtherComponents();
        initValues();
    }

    /**
     * 
     * @param dtp
     */
    public void setDeskTopPane(JDesktopPane dtp) {
        this.dtp = dtp;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsPanel = new javax.swing.JPanel();
        setupPanel = new javax.swing.JPanel();
        loadSetupButton = new javax.swing.JButton();
        saveSetupButton = new javax.swing.JButton();
        optionsPanel = new javax.swing.JPanel();
        headingCheckBox = new javax.swing.JCheckBox();
        variableNamesComboBox = new javax.swing.JComboBox();
        variableNamesLabel = new javax.swing.JLabel();
        fileFormatLabel = new javax.swing.JLabel();
        fileFormatComboBox = new javax.swing.JComboBox();
        formatDateCheckBox = new javax.swing.JCheckBox();
        correctUnknownCheckBox = new javax.swing.JCheckBox();
        dateFormatComboBox = new javax.swing.JComboBox();
        exportPanel = new javax.swing.JPanel();
        writeFileButton = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        variableChooserPanel = new canreg.client.gui.components.VariablesChooserPanel();
        rangeFilterPanel = new canreg.client.gui.components.RangeFilterPanel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getResourceMap(ExportReportInternalFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setDoubleBuffered(true);
        setFrameIcon(resourceMap.getIcon("Form.frameIcon")); // NOI18N
        setName("Form"); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("settingsPanel.border.title"))); // NOI18N
        settingsPanel.setName("settingsPanel"); // NOI18N

        setupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("setupPanel.border.title"))); // NOI18N
        setupPanel.setName("setupPanel"); // NOI18N

        loadSetupButton.setText(resourceMap.getString("loadSetupButton.text")); // NOI18N
        loadSetupButton.setEnabled(false);
        loadSetupButton.setName("loadSetupButton"); // NOI18N

        saveSetupButton.setText(resourceMap.getString("saveSetupButton.text")); // NOI18N
        saveSetupButton.setEnabled(false);
        saveSetupButton.setName("saveSetupButton"); // NOI18N

        javax.swing.GroupLayout setupPanelLayout = new javax.swing.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addComponent(loadSetupButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveSetupButton))
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(loadSetupButton)
                .addComponent(saveSetupButton))
        );

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("optionsPanel.border.title"))); // NOI18N
        optionsPanel.setName("optionsPanel"); // NOI18N

        headingCheckBox.setText(resourceMap.getString("headingCheckBox.text")); // NOI18N
        headingCheckBox.setEnabled(false);
        headingCheckBox.setName("headingCheckBox"); // NOI18N

        variableNamesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Short", "English", "Full", "Standard" }));
        variableNamesComboBox.setName("variableNamesComboBox"); // NOI18N

        variableNamesLabel.setText(resourceMap.getString("variableNamesLabel.text")); // NOI18N
        variableNamesLabel.setName("variableNamesLabel"); // NOI18N

        fileFormatLabel.setText(resourceMap.getString("fileFormatLabel.text")); // NOI18N
        fileFormatLabel.setName("fileFormatLabel"); // NOI18N

        fileFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tab Separated Values", "Comma Separated" }));
        fileFormatComboBox.setName("fileFormatComboBox"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class).getContext().getActionMap(ExportReportInternalFrame.class, this);
        formatDateCheckBox.setAction(actionMap.get("formatDateCheckBoxChanged")); // NOI18N
        formatDateCheckBox.setText(resourceMap.getString("formatDateCheckBox.text")); // NOI18N
        formatDateCheckBox.setToolTipText(resourceMap.getString("formatDateCheckBox.toolTipText")); // NOI18N
        formatDateCheckBox.setName("formatDateCheckBox"); // NOI18N

        correctUnknownCheckBox.setText(resourceMap.getString("correctUnknownCheckBox.text")); // NOI18N
        correctUnknownCheckBox.setToolTipText(resourceMap.getString("correctUnknownCheckBox.toolTipText")); // NOI18N
        correctUnknownCheckBox.setEnabled(false);
        correctUnknownCheckBox.setName("correctUnknownCheckBox"); // NOI18N

        dateFormatComboBox.setEditable(true);
        dateFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dd/mm/yyyy", "mm/dd/yyyy", "mm/dd/yy", "yyyy/mm/dd" }));
        dateFormatComboBox.setToolTipText(resourceMap.getString("dateFormatComboBox.toolTipText")); // NOI18N
        dateFormatComboBox.setEnabled(false);
        dateFormatComboBox.setName("dateFormatComboBox"); // NOI18N

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headingCheckBox)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(variableNamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(variableNamesLabel))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(fileFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileFormatComboBox, 0, 206, Short.MAX_VALUE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(formatDateCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFormatComboBox, 0, 184, Short.MAX_VALUE))
                    .addComponent(correctUnknownCheckBox))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addComponent(headingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variableNamesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variableNamesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileFormatLabel)
                    .addComponent(fileFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatDateCheckBox)
                    .addComponent(dateFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(correctUnknownCheckBox))
        );

        exportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("exportPanel.border.title"))); // NOI18N
        exportPanel.setName("exportPanel"); // NOI18N

        writeFileButton.setAction(actionMap.get("writeFileAction")); // NOI18N
        writeFileButton.setName("writeFileButton"); // NOI18N

        javax.swing.GroupLayout exportPanelLayout = new javax.swing.GroupLayout(exportPanel);
        exportPanel.setLayout(exportPanelLayout);
        exportPanelLayout.setHorizontalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(writeFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
        );
        exportPanelLayout.setVerticalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(writeFileButton)
        );

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(setupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportPanel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(setupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("resultPanel.border.title"))); // NOI18N
        resultPanel.setName("resultPanel"); // NOI18N

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 802, Short.MAX_VALUE)
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );

        variableChooserPanel.setName("variableChooserPanel"); // NOI18N

        rangeFilterPanel.setName("rangeFilterPanel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resultPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rangeFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(variableChooserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rangeFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(variableChooserPanel, 0, 0, Short.MAX_VALUE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        rangeFilterPanel.setDeskTopPane(dtp);
        rangeFilterPanel.initValues();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox correctUnknownCheckBox;
    private javax.swing.JComboBox dateFormatComboBox;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JComboBox fileFormatComboBox;
    private javax.swing.JLabel fileFormatLabel;
    private javax.swing.JCheckBox formatDateCheckBox;
    private javax.swing.JCheckBox headingCheckBox;
    private javax.swing.JButton loadSetupButton;
    private javax.swing.JPanel optionsPanel;
    private canreg.client.gui.components.RangeFilterPanel rangeFilterPanel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton saveSetupButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JPanel setupPanel;
    private canreg.client.gui.components.VariablesChooserPanel variableChooserPanel;
    private javax.swing.JComboBox variableNamesComboBox;
    private javax.swing.JLabel variableNamesLabel;
    private javax.swing.JButton writeFileButton;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return
     */
    public JDesktopPane getDtp() {
        return dtp;
    }

    private void initValues() {
        variableChooserPanel.initPanel(dictionary);
        rangeFilterPanel.setDeskTopPane(dtp);
        rangeFilterPanel.setActionListener(this);
    }

    private void initOtherComponents() {

        resultScrollPane = canreg.common.LazyViewport.createLazyScrollPaneFor(resultTable);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
                resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(resultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE));
        resultPanelLayout.setVerticalGroup(
                resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(resultScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE));

        resultScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        resultTable.setColumnSelectionAllowed(true);
        resultPanel.setVisible(false);

        resultTable.setName("resultTable"); // NOI18N
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                // rowClicked(evt);
            }

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                // columnTableMousePressed(evt);
            }
        });

        path = localSettings.getProperty("export_data_path");

        if (path == null) {
            chooser = new JFileChooser();
        } else {
            chooser = new JFileChooser(path);
        }
    }

    /**
     * 
     * @return
     */
    @Action
    public Task refresh() {
        // navigationPanel.goToTopAction();
        resultPanel.setVisible(false);
        return new RefreshTask(org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
    }

    private class RefreshTask extends org.jdesktop.application.Task<Object, Void> {

        String tableName = null;
        DatabaseFilter filter = new DatabaseFilter();
        DistributedTableDescription newTableDatadescription = null;

        RefreshTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to RefreshTask fields, here.
            super(app);
            tableName = rangeFilterPanel.getSelectedTable();
            variablesToShow = variableChooserPanel.getSelectedVariableNames(tableName);

            filter.setFilterString(rangeFilterPanel.getFilter().trim());
            filter.setSortByVariable(rangeFilterPanel.getSortByVariable().trim());
            filter.setRange(rangeFilterPanel.getRange());
            // setProgress(0, 0, 4);
            setMessage("Initiating query...");
            // setProgress(1, 0, 4);
            Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.INFO, Runtime.getRuntime().freeMemory() + " free memory.");
        }

        @Override
        protected Object doInBackground() {
            String result = "OK";
            try {
                newTableDatadescription = canreg.client.CanRegClientApp.getApplication().getDistributedTableDescription(filter, tableName);
            } catch (SQLException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                result = "Not valid";
            } catch (RemoteException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                result = "Remote exception";
            } catch (SecurityException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                result = "Security exception";
                // } catch (InterruptedException ignore) {
                //     result = "Ignore";
            } catch (Exception ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                result = "Not OK";
            }
            return result;
        }

        @Override
        protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().

            // boolean theResult = ;
            if (result.equals("OK")) {

                // release old resultSet
                if (tableDatadescription != null) {
                    try {
                        CanRegClientApp.getApplication().releaseResultSet(tableDatadescription.getResultSetID());
                        tableDataSource = null;
                    } catch (SecurityException securityException) {
                        // TODO: Add handler
                    } catch (RemoteException remoteException) {
                        // TODO: Add handler
                    }
                }

                tableDatadescription = newTableDatadescription;

                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.INFO, Runtime.getRuntime().freeMemory() + " free memory.");

                if (tableDatadescription != null) {
                    try {
                        tableDataSource = new DistributedTableDataSourceClient(tableDatadescription);
                    } catch (Exception ex) {
                        Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.INFO, Runtime.getRuntime().freeMemory() + " free memory.");
                }

                if (tableDataSource != null) {
                    try {
                        tableDataModel = new DistributedTableModel(tableDataSource);
                    } catch (Exception ex) {
                        Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // tableDataModel = new PagingTableModel(tableDataSource);
                    Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.INFO, Runtime.getRuntime().freeMemory() + " free memory.");
                    // setProgress(2, 0, 4);
                }

                setMessage("Starting a new transaction...");

                rangeFilterPanel.setRecordsShown(tableDataModel.getRowCount());

                // setProgress(3, 0, 4);

                setMessage("Fetching data...");
                resultTable.setColumnSelectionAllowed(false);
                resultTable.setModel(tableDataModel);
                tableColumnModel = new XTableColumnModel();
                resultTable.setColumnModel(tableColumnModel);
                resultTable.createDefaultColumnsFromModel();
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.INFO, Runtime.getRuntime().freeMemory() + " free memory.");

                // setProgress(4, 0, 4);
                setMessage("Finished");

                updateVariablesShown();

                resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                TableColumnAdjuster tca = new TableColumnAdjuster(resultTable);
                tca.setColumnDataIncluded(false);
                tca.setOnlyAdjustLarger(false);
                tca.adjustColumns();
                resultPanel.setVisible(true);
            } else if (result.equals("Not valid")) {
                JOptionPane.showInternalMessageDialog(rootPane, "Not a valid filter.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, result);
            }

        }
    }

    private void updateVariablesShown() {
        String tableName = rangeFilterPanel.getSelectedTable();
        variablesToShow = variableChooserPanel.getSelectedVariableNames(tableName);
        // first set all invisible
        Enumeration<TableColumn> tcs = tableColumnModel.getColumns(false);
        while (tcs.hasMoreElements()) {
            TableColumn column = tcs.nextElement();
            tableColumnModel.setColumnVisible(column, variablesToShow.contains(column.getHeaderValue().toString()));
        }
    }

    public void actionPerformed(ActionEvent e) {
        if ("refresh".equalsIgnoreCase(e.getActionCommand())) {
            Task refreshTask = refresh();
            refreshTask.execute();
        }
    }

    /**
     * 
     * @return
     */
    @Action
    public Task writeFileAction() {
        // Get filename
        int returnVal = chooser.showSaveDialog(this);
        String fileName = "";
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                //set the file name
                fileName = chooser.getSelectedFile().getCanonicalPath();
                File file = new File(fileName);
                if (file.exists()) {
                    int choice = JOptionPane.showInternalConfirmDialog(CanRegClientApp.getApplication().getMainFrame().getContentPane(), "File exists: " + fileName + ".\n Overwrite?", "File exists.", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (choice == JOptionPane.CANCEL_OPTION) {
                        return null;
                    } else if (choice == JOptionPane.NO_OPTION) {
                        // choose a new file
                        writeFileAction();
                        return null;
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return new WriteFileActionTask(fileName, org.jdesktop.application.Application.getInstance(canreg.client.CanRegClientApp.class));
    }

    private class WriteFileActionTask extends org.jdesktop.application.Task<Object, Void> {

        BufferedWriter bw;
        int rowCount;
        int columnCount;
        private String separatingString;
        private boolean formatDate = false;
        private boolean correctUnknown = false;

        WriteFileActionTask(String fileName, org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to WriteFileActionTask fields, here.
            super(app);
            writeFileButton.setEnabled(false);
            // refresh the table if necessary
            if (!resultPanel.isVisible()) {
                Task refresher = refresh();
                refresher.execute();
                while (!refresher.isDone()) {
                    // wait 
                }
            }

            formatDate = formatDateCheckBox.isSelected();
            correctUnknown = correctUnknownCheckBox.isSelected() && formatDate;

            // Lock the table
            resultPanel.setVisible(false);
            rangeFilterPanel.setRefreshButtonEnabled(false);

            Map<String, boolean[]> variablesToExport = new TreeMap<String, boolean[]>();

            // build the map of column names and checked variables boxes
            for (int column = 0; column < resultTable.getColumnCount(); column++) {
                String columnName = resultTable.getColumnName(column).toUpperCase();
                VariablesExportDetailsPanel vedp = variableChooserPanel.getVariablesExportDetailsPanelByName(columnName);
                variablesToExport.put(columnName, vedp.getCheckboxes());
            }

            if (fileFormatComboBox.getSelectedIndex() == 1) {
                separatingString = ",";
            } else {
                separatingString = "\t";
            }

            try {
                File file = new File(fileName);
                localSettings.setProperty("export_data_path", file.getParent());
                bw = new BufferedWriter(new FileWriter(file));
                rowCount = resultTable.getRowCount();
                columnCount = resultTable.getColumnCount();
            } catch (IOException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.

            // Here we do indeed reference the jtable. However as long as the user does not move the columns it should be ok...
            // TODO: reference the data source instead of the resultTable!

            String line = "";
            VariablesExportDetailsPanel dvle;
            Object value;
            GregorianCalendarCanReg gregorianCanRegCalendar;

            try {
                for (int column = 0; column < columnCount; column++) {
                    dvle = variableChooserPanel.getVariablesExportDetailsPanelByName(resultTable.getColumnName(column));
                    boolean[] bools = dvle.getCheckboxes();
                    String columnName = resultTable.getColumnName(column);
                    //
                    if (variableNamesComboBox.getSelectedIndex() == VARIABLE_NAME_ENGLISH_INDEX) {
                        columnName = dvle.getVariable().getEnglishName();
                    } else if (variableNamesComboBox.getSelectedIndex() == VARIABLE_NAME_FULL_INDEX) {
                        columnName = dvle.getVariable().getFullName();
                    } else if (variableNamesComboBox.getSelectedIndex() == VARIABLE_NAME_STANDARD_INDEX) {
                        String standardName = dvle.getVariable().getStandardVariableName();
                        if (standardName != null) {
                            columnName = standardName;
                        } else {
                            // add a star
                            columnName += "*";
                        }
                    } else if (variableNamesComboBox.getSelectedIndex() == VARIABLE_NAME_SHORT_INDEX) {
                        // do nothing
                    }

                    // the raw name
                    if (bools[0]) {
                        line += columnName + separatingString;
                    }
                    // the category
                    if (bools[1]) {
                        line += columnName + " (cat)" + separatingString;
                    }
                    // the description
                    if (bools[2]) {
                        line += columnName + " (desc)" + separatingString;
                    }
                    boolean last = (column == columnCount - 1);
                    if (last) {
                        line = line.substring(0, line.length() - separatingString.length());
                    }
                }
                bw.write(line + "\n");
                line = "";
                for (int row = 0; row < rowCount; row++) {
                    for (int column = 0; column < columnCount; column++) {
                        dvle = variableChooserPanel.getVariablesExportDetailsPanelByName(resultTable.getColumnName(column));
                        value = resultTable.getValueAt(row, column);
                        boolean[] bools = dvle.getCheckboxes();
                        // the raw code
                        if (bools[0]) {
                            // Should we format the date?
                            if (formatDate && dvle.getVariable().getVariableType().equalsIgnoreCase(Globals.VARIABLE_TYPE_DATE_NAME)) {
                                try {
                                    gregorianCanRegCalendar = DateHelper.parseDateStringToGregorianCalendarCanReg((String) value, Globals.DATE_FORMAT_STRING);
                                    if (correctUnknown) {
                                        if (gregorianCanRegCalendar.isUnknownMonth()) {
                                            // Set month to July
                                            gregorianCanRegCalendar.set(Calendar.MONTH, 7 - 1);
                                            gregorianCanRegCalendar.setUnkownMonth(false);
                                            // And day to first
                                            gregorianCanRegCalendar.set(Calendar.DAY_OF_MONTH, 1);
                                            gregorianCanRegCalendar.setUnknownDay(false);
                                        } else if (gregorianCanRegCalendar.isUnknownDay()) {
                                            // Set day to mid-month
                                            gregorianCanRegCalendar.set(Calendar.DAY_OF_MONTH, 15);
                                            gregorianCanRegCalendar.setUnknownDay(false);
                                        }
                                    }
                                    value = DateHelper.parseGregorianCalendarCanRegToDateString(gregorianCanRegCalendar, (String) dateFormatComboBox.getSelectedItem());
                                } catch (ParseException ex) {
                                    Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            line += value + separatingString;
                        }
                        // the category
                        if (bools[1]) {
                            String code = (String) value;
                            int categoryLength = dvle.getDictionary().getCodeLength();
                            String category = dvle.getDictionary().getDictionaryEntries().get(code.substring(0, categoryLength)).getDescription();
                            line += category + separatingString;
                        }
                        // the description
                        if (bools[2]) {
                            String code = (String) value;
                            String description = dvle.getDictionary().getDictionaryEntries().get(code).getDescription();
                            line += description + separatingString;
                        }
                        boolean last = (column == columnCount - 1);
                        if (last) {
                            line = line.substring(0, line.length() - separatingString.length());
                        }
                    }
                    setProgress(100 * row / rowCount);
                    bw.write(line + "\n");
                    line = "";
                }
            } catch (IOException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            try {
                // Runs on the EDT.  Update the GUI based on
                // the result computed by doInBackground().
                bw.flush();
                bw.close();

                rangeFilterPanel.setRefreshButtonEnabled(true);
                resultPanel.setVisible(true);
                writeFileButton.setEnabled(true);

                localSettings.writeSettings();

            } catch (IOException ex) {
                Logger.getLogger(ExportReportInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    @Action
    public void formatDateCheckBoxChanged() {
        correctUnknownCheckBox.setEnabled(formatDateCheckBox.isSelected());
        dateFormatComboBox.setEnabled(formatDateCheckBox.isSelected());
    }
}
